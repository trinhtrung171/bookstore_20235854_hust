import 'dotenv/config';       // Load .env
import express from 'express';
import cors from 'cors';
import pkg from 'pg';

const { Pool } = pkg;
const app = express();

app.use(cors());              // Cho ph√©p g·ªçi t·ª´ front-end kh√°c port
app.use(express.json());      // Parse JSON body

// ====== PostgreSQL Pool ======
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: String(process.env.DB_PASSWORD),
  port: Number(process.env.DB_PORT)
});

pool.connect((err) => {
  if (err) {
    console.error('‚ùå L·ªói khi k·∫øt n·ªëi t·ªõi database', err);
  } else {
    console.log('‚úÖ K·∫øt n·ªëi PostgreSQL th√†nh c√¥ng!');
  }
});

// ====== START SERVER ======
const PORT = Number(process.env.PORT) || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});


// ====== ROUTES ======

// Route test server
app.get('/', (req, res) => {
  res.send('Server Node.js + PostgreSQL ƒëang ch·∫°y!');
});

// ====== GET PRODUCTS (c√≥ review) ======
app.get('/products', async (req, res) => {
  try {
    const { rows } = await pool.query(`
      SELECT 
        p.product_id AS id,
        p.name AS title,
        p.author,
        p.category,
        p.sell_price AS price,
        p.description,
        p.star AS rating,
        p.image,
        p.stock,
        COUNT(r.review_id) AS reviews,
        COALESCE(ROUND(AVG(r.rating), 2), 0) AS avg_rating
      FROM Product p
      LEFT JOIN Review r ON p.product_id = r.product_id
      GROUP BY p.product_id
      ORDER BY p.added_date DESC
    `);

    res.json(rows);
  } catch (err) {
    console.error("‚ùå L·ªói SQL:", err.message);
    res.status(500).send('L·ªói server: ' + err.message);
  }
});

// L·∫•y danh s√°ch users
app.get('/users', async (req, res) => {
  try {
    const { rows } = await pool.query(
      'SELECT user_id, username, email, phone_number, address, role, added_date FROM "User"'
    );
    res.json(rows);
  } catch (err) {
    console.error("‚ùå L·ªói SQL:", err.message);
    res.status(500).send('L·ªói server: ' + err.message);
  }
});

// Th√™m user m·ªõi (KH√îNG hash password)
app.post('/users', async (req, res) => {
  const { username, email, password, phone_number, address, role } = req.body;
  try {
    const { rows } = await pool.query(
      `INSERT INTO "User"(username, password, email, phone_number, address, role)
       VALUES($1, $2, $3, $4, $5, $6)
       RETURNING user_id, username, email, phone_number, address, role, added_date`,
      [username, password, email, phone_number || null, address || null, role || false]
    );

    res.json(rows[0]);
  } catch (err) {
    console.error("‚ùå L·ªói SQL:", err.message);
    res.status(500).send('L·ªói server: ' + err.message);
  }
});

// L·∫•y user theo user_id
app.get('/users/:id', async (req, res) => {
  const { id } = req.params;
  try {
    const { rows } = await pool.query(
      'SELECT user_id, username, email, phone_number, address, role, added_date FROM "User" WHERE user_id = $1',
      [id]
    );
    if (rows.length > 0) {
      // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng n·∫øu t√¨m th·∫•y
      res.json(rows[0]);
    } else {
      // B√°o l·ªói n·∫øu kh√¥ng t√¨m th·∫•y
      res.status(404).send('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
    }
  } catch (err) {
    console.error("‚ùå L·ªói SQL:", err.message);
    res.status(500).send('L·ªói server: ' + err.message);
  }
});

// C·∫≠p nh·∫≠t user theo user_id
app.put('/users/:id', async (req, res) => {
  const { id } = req.params;
  const { username, email, phone_number, address, role } = req.body;
  try {
    const { rows } = await pool.query(
      `UPDATE "User"
       SET username=$1, email=$2, phone_number=$3, address=$4, role=$5
       WHERE user_id=$6
       RETURNING user_id, username, email, phone_number, address, role, added_date`,
      [username, email, phone_number || null, address || null, role || false, id]
    );
    res.json(rows[0]);
  } catch (err) {
    console.error("‚ùå L·ªói SQL:", err.message);
    res.status(500).send('L·ªói server: ' + err.message);
  }
});

// X√≥a user theo user_id
app.delete('/users/:id', async (req, res) => {
  const { id } = req.params;
  try {
    await pool.query('DELETE FROM "User" WHERE user_id=$1', [id]);
    res.send(`User ${id} ƒë√£ b·ªã x√≥a`);
  } catch (err) {
    console.error("‚ùå L·ªói SQL:", err.message);
    res.status(500).send('L·ªói server: ' + err.message);
  }
});

// ====== LOGIN (so s√°nh plain text v·ªõi username) ======
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  try {
    const { rows } = await pool.query(
      'SELECT * FROM "User" WHERE username = $1',
      [username]
    );

    if (rows.length === 0) {
      return res.status(401).json({ message: 'T√™n ƒëƒÉng nh·∫≠p kh√¥ng t·ªìn t·∫°i' });
    }

    const user = rows[0];

    if (password !== user.password) {
      return res.status(401).json({ message: 'Sai m·∫≠t kh·∫©u' });
    }

    res.json({
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!',
      user: {
        user_id: user.user_id,
        username: user.username,
        email: user.email,
        phone_number: user.phone_number,
        address: user.address,
        role: user.role,
        added_date: user.added_date
      }
    });
  } catch (err) {
    console.error("‚ùå L·ªói SQL:", err.message);
    res.status(500).send('L·ªói server: ' + err.message);
  }
});

// Route l·∫•y t·∫•t c·∫£ vouchers ƒëang c√≥ hi·ªáu l·ª±c
app.get('/vouchers', async (req, res) => {
  let client;
  try {
    // K·∫øt n·ªëi ƒë·∫øn database
    client = await pool.connect(); 

    // Th·ª±c hi·ªán truy v·∫•n SQL, ch·ªâ l·∫•y voucher c√≥ hi·ªáu l·ª±c trong ng√†y h√¥m nay
    const sql = `
      SELECT * FROM Voucher 
      WHERE start_date <= NOW() AND end_date >= NOW();
    `;
    const result = await client.query(sql);

    // Tr·∫£ v·ªÅ danh s√°ch voucher d∆∞·ªõi d·∫°ng JSON
    res.status(200).json(result.rows);
  } catch (err) {
    console.error('L·ªói khi l·∫•y d·ªØ li·ªáu vouchers:', err);
    // Tr·∫£ v·ªÅ l·ªói n·∫øu c√≥
    res.status(500).json({ message: 'Internal Server Error' });
  } finally {
    // Lu√¥n ƒë√≥ng k·∫øt n·ªëi sau khi ho√†n t·∫•t
    if (client) {
      client.release();
    }
  }
});

// Route x√°c th·ª±c qu√™n m·∫≠t kh·∫©u (ki·ªÉm tra username + email)
app.post('/api/forgot-password', async (req, res) => {
  const { username, email } = req.body;
  let client;
  try {
    client = await pool.connect();
    const userQuery = 'SELECT * FROM "User" WHERE username = $1 AND email = $2';
    const userResult = await client.query(userQuery, [username, email]);
    if (userResult.rowCount === 0) {
      return res.status(404).json({ message: 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c email kh√¥ng ch√≠nh x√°c.' });
    }
    res.status(200).json({ message: 'X√°c th·ª±c th√†nh c√¥ng!' });
  } catch (err) {
    console.error('L·ªói khi x√°c th·ª±c qu√™n m·∫≠t kh·∫©u:', err);
    res.status(500).json({ message: 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.' });
  } finally {
    if (client) client.release();
  }
});

// Route x·ª≠ l√Ω y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
app.post('/api/reset-password', async (req, res) => {
  const { username, email, newPassword } = req.body;
  let client;
  try {
    client = await pool.connect();
    // Ki·ªÉm tra l·∫°i username/email
    const userQuery = 'SELECT * FROM "User" WHERE username = $1 AND email = $2';
    const userResult = await client.query(userQuery, [username, email]);
    if (userResult.rowCount === 0) {
      return res.status(404).json({ message: 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c email kh√¥ng ch√≠nh x√°c.' });
    }
    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    await client.query(
      'UPDATE "User" SET password = $1 WHERE username = $2 AND email = $3',
      [newPassword, username, email]
    );
    res.status(200).json({ message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!' });
  } catch (err) {
    console.error('L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:', err);
    res.status(500).json({ message: 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.' });
  } finally {
    if (client) client.release();
  }
});

// L·∫•y gi·ªè h√†ng theo user_id
app.get('/cart', async (req, res) => {
  const { user_id } = req.query;
  if (!user_id) {
    return res.status(400).json({ message: 'Thi·∫øu tham s·ªë user_id.' });
  }
  let client;
  try {
    client = await pool.connect();
    const { rows } = await client.query('SELECT * FROM Cart WHERE user_id = $1', [user_id]);
    res.json(rows);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server: ' + err.message });
  } finally {
    if (client) client.release();
  }
});

// T·∫°o m·ªõi gi·ªè h√†ng cho user
app.post('/cart', async (req, res) => {
  const { user_id } = req.body;
  if (!user_id) {
    return res.status(400).json({ message: 'Thi·∫øu tham s·ªë user_id.' });
  }
  let client;
  try {
    client = await pool.connect();
    const result = await client.query(
      'INSERT INTO Cart (user_id) VALUES ($1) RETURNING *',
      [user_id]
    );
    res.status(201).json(result.rows[0]);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server: ' + err.message });
  } finally {
    if (client) client.release();
  }
});

// L·∫•y danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng HO·∫∂C ki·ªÉm tra m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ
app.get('/cart/items', async (req, res) => {
  const { cart_id, product_id } = req.query;

  if (!cart_id) {
    return res.status(400).json({ message: 'Thi·∫øu tham s·ªë cart_id.' });
  }

  let client;
  try {
    client = await pool.connect();
    let query = 'SELECT * FROM CartItem WHERE cart_id = $1';
    const values = [cart_id];

    if (product_id) {
      query += ' AND product_id = $2';
      values.push(product_id);
    }

    const { rows } = await client.query(query, values);
    res.json(rows);
  } catch (err) {
    console.error("‚ùå L·ªói SQL:", err.message);
    res.status(500).json({ message: 'L·ªói server: ' + err.message });
  } finally {
    if (client) client.release();
  }
});

// *** ADD: Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng ***
app.post('/cart/items', async (req, res) => {
    const { cart_id, product_id, quantity, is_selected } = req.body;
    if (!cart_id || !product_id || !quantity) {
        return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt.' });
    }
    let client;
    try {
        client = await pool.connect();
        const { rows } = await client.query(
            'INSERT INTO CartItem (cart_id, product_id, quantity, is_selected) VALUES ($1, $2, $3, $4) RETURNING *',
            [cart_id, product_id, quantity, is_selected]
        );
        res.status(201).json(rows[0]);
    } catch (err) {
        console.error("‚ùå L·ªói SQL khi th√™m v√†o gi·ªè:", err.message);
        res.status(500).json({ message: 'L·ªói server: ' + err.message });
    } finally {
        if (client) client.release();
    }
});

// *** ADD: C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng ***
app.patch('/cart/items/:cart_item_id', async (req, res) => {
    const { cart_item_id } = req.params;
    const { quantity, is_selected } = req.body;

    // Build the query dynamically
    let setClauses = [];
    let values = [];
    let paramIndex = 1;

    if (quantity !== undefined) {
        setClauses.push(`quantity = $${paramIndex++}`);
        values.push(quantity);
    }
    if (is_selected !== undefined) {
        setClauses.push(`is_selected = $${paramIndex++}`);
        values.push(is_selected);
    }

    if (setClauses.length === 0) {
        return res.status(400).json({ message: 'Kh√¥ng c√≥ tr∆∞·ªùng n√†o ƒë·ªÉ c·∫≠p nh·∫≠t.' });
    }

    values.push(cart_item_id);

    const query = `UPDATE CartItem SET ${setClauses.join(', ')} WHERE cart_item_id = $${paramIndex} RETURNING *`;
    
    let client;
    try {
        client = await pool.connect();
        const { rows } = await client.query(query, values);
        if (rows.length === 0) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng.' });
        }
        res.json(rows[0]);
    } catch (err) {
        console.error("‚ùå L·ªói SQL khi c·∫≠p nh·∫≠t gi·ªè h√†ng:", err.message);
        res.status(500).json({ message: 'L·ªói server: ' + err.message });
    } finally {
        if (client) client.release();
    }
});

// *** ADD: B·ªè ch·ªçn t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng ***
app.patch('/cart/deselect-all', async (req, res) => {
    const { cart_id } = req.body;
    if (!cart_id) {
        return res.status(400).json({ message: 'Thi·∫øu tham s·ªë cart_id.' });
    }
    
    let client;
    try {
        client = await pool.connect();
        const { rowCount } = await client.query(
            'UPDATE CartItem SET is_selected = false WHERE cart_id = $1 AND is_selected = true',
            [cart_id]
        );
        res.status(200).json({ 
            message: 'ƒê√£ b·ªè ch·ªçn t·∫•t c·∫£ s·∫£n ph·∫©m th√†nh c√¥ng.',
            updatedItems: rowCount 
        });
    } catch (err) {
        console.error("‚ùå L·ªói SQL khi b·ªè ch·ªçn h√†ng lo·∫°t:", err.message);
        res.status(500).json({ message: 'L·ªói server: ' + err.message });
    } finally {
        if (client) client.release();
    }
});

// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
app.delete('/cart/items', async (req, res) => {
  const { cart_id, product_id } = req.body;
  if (!cart_id || !product_id) {
    return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin s·∫£n ph·∫©m ho·∫∑c gi·ªè h√†ng.' });
  }
  let client;
  try {
    client = await pool.connect();
    await client.query(
      'DELETE FROM CartItem WHERE cart_id = $1 AND product_id = $2',
      [cart_id, product_id]
    );
    res.status(200).json({ message: 'X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th√†nh c√¥ng.' });
  } catch (err) {
    console.error("‚ùå L·ªói SQL:", err.message);
    res.status(500).json({ message: 'L·ªói server: ' + err.message });
  } finally {
    if (client) client.release();
  }
});


// ==============================================================
// ==============================================================
// ====== BILL ROUTES (S·ª≠a l·∫°i cho kh·ªõp v·ªõi schema c·ªßa b·∫°n)====== 
// ==============================================================
// ==============================================================

// L·∫•y t·∫•t c·∫£ h√≥a ƒë∆°n c·ªßa m·ªôt user
app.get('/bills/user/:userId', async (req, res) => {
  const { userId } = req.params;
  let client;
  try {
    client = await pool.connect();
    // L·∫•y th√¥ng tin c∆° b·∫£n c·ªßa c√°c h√≥a ƒë∆°n
    const billsResult = await client.query(
      'SELECT * FROM Bill WHERE user_id = $1 ORDER BY purchase_date DESC',
      [userId]
    );
    const bills = billsResult.rows;

    // V·ªõi m·ªói h√≥a ƒë∆°n, l·∫•y chi ti·∫øt c√°c s·∫£n ph·∫©m b√™n trong
    for (const bill of bills) {
      const itemsResult = await client.query(
        `SELECT bi.quantity, bi.price_at_purchase, p.name as title, p.image 
         FROM BillItem bi
         JOIN Product p ON bi.product_id = p.product_id
         WHERE bi.bill_id = $1`,
        [bill.bill_id]
      );
      bill.items = itemsResult.rows;
    }
    
    res.json(bills);
  } catch (err) {
    console.error("‚ùå L·ªói SQL khi l·∫•y h√≥a ƒë∆°n:", err.message);
    res.status(500).json({ message: 'L·ªói server: ' + err.message });
  } finally {
    if (client) client.release();
  }
});


app.post('/bills', async (req, res) => {
    // Nh·∫≠n th√™m usedShippingVoucherCode t·ª´ body
    const { 
        userId, items, shippingDetails, totals, usedVoucherCode, usedShippingVoucherCode 
    } = req.body;

    if (!userId || !items || !shippingDetails || !totals || items.length === 0) {
        return res.status(400).json({ message: 'Thi·∫øu d·ªØ li·ªáu ho·∫∑c kh√¥ng c√≥ s·∫£n ph·∫©m ƒë·ªÉ t·∫°o h√≥a ƒë∆°n.' });
    }

    const client = await pool.connect();
    try {
        await client.query('BEGIN');

        for (const item of items) {
            const stockCheck = await client.query('SELECT stock FROM Product WHERE product_id = $1', [item.book.id]);
            if (stockCheck.rows.length === 0 || stockCheck.rows[0].stock < item.quantity) {
                 await client.query('ROLLBACK');
                 return res.status(400).json({ message: `S·∫£n ph·∫©m "${item.book.title}" kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng t·ªìn kho.` });
            }
        }

        // X·ª≠ l√Ω voucher gi·∫£m gi√°
        let discountVoucherId = null;
        if (usedVoucherCode) {
            const voucherResult = await client.query('SELECT voucher_id FROM Voucher WHERE code = $1', [usedVoucherCode]);
            if (voucherResult.rows.length > 0) {
                discountVoucherId = voucherResult.rows[0].voucher_id;
            }
        }
        
        const billQuery = `
            INSERT INTO Bill (user_id, total_amount, voucher_id, status, shipping_name, shipping_address, shipping_phone)
            VALUES ($1, $2, $3, $4, $5, $6, $7)
            RETURNING bill_id;
        `;
        const billValues = [
            userId, totals.finalTotal, discountVoucherId, 'ch·ªù x√°c nh·∫≠n', // V·∫´n l∆∞u voucher gi·∫£m gi√° v√†o h√≥a ƒë∆°n
            shippingDetails.name, shippingDetails.address, shippingDetails.phone,
        ];
        const newBillResult = await client.query(billQuery, billValues);
        const newBillId = newBillResult.rows[0].bill_id;

        for (const item of items) {
            await client.query(
                'INSERT INTO BillItem (bill_id, product_id, quantity, price_at_purchase) VALUES ($1, $2, $3, $4)',
                [newBillId, item.book.id, item.quantity, item.book.price]
            );
            await client.query(
                'UPDATE Product SET stock = stock - $1 WHERE product_id = $2',
                [item.quantity, item.book.id]
            );
        }

        // GI·∫¢M S·ªê L∆Ø·ª¢NG VOUCHER GI·∫¢M GI√Å (N·∫æU C√ì)
        if (discountVoucherId) {
            await client.query(
                'UPDATE Voucher SET remaining = remaining - 1 WHERE voucher_id = $1 AND remaining > 0',
                [discountVoucherId]
            );
        }

        // GI·∫¢M S·ªê L∆Ø·ª¢NG VOUCHER V·∫¨N CHUY·ªÇN (N·∫æU C√ì)
        if (usedShippingVoucherCode) {
            await client.query(
                'UPDATE Voucher SET remaining = remaining - 1 WHERE code = $1 AND remaining > 0',
                [usedShippingVoucherCode]
            );
        }

        const productIds = items.map(item => item.book.id);
        const cartResult = await client.query('SELECT cart_id FROM Cart WHERE user_id = $1', [userId]);
        if (cartResult.rows.length > 0) {
            const cartId = cartResult.rows[0].cart_id;
            await client.query(
                'DELETE FROM CartItem WHERE cart_id = $1 AND product_id = ANY($2::int[])',
                [cartId, productIds]
            );
        }

        await client.query('COMMIT');
        res.status(201).json({ message: 'ƒê·∫∑t h√†ng th√†nh c√¥ng!', bill_id: newBillId });

    } catch (err) {
        await client.query('ROLLBACK');
        console.error("‚ùå L·ªói SQL khi t·∫°o h√≥a ƒë∆°n:", err);
        res.status(500).json({ message: 'ƒê·∫∑t h√†ng th·∫•t b·∫°i: ' + err.message });
    } finally {
        client.release();
    }
});

// H·ªßy m·ªôt h√≥a ƒë∆°n v√† ho√†n l·∫°i voucher (n·∫øu c√≥) v√† ho√†n l·∫°i stock
app.patch('/bills/:billId/cancel', async (req, res) => {
    const { billId } = req.params;
    const client = await pool.connect();

    try {
        await client.query('BEGIN');

        const billResult = await client.query(
            "SELECT voucher_id, status FROM Bill WHERE bill_id = $1 FOR UPDATE", // FOR UPDATE ƒë·ªÉ kh√≥a d√≤ng, tr√°nh race condition
            [billId]
        );
        
        if (billResult.rows.length === 0) {
            await client.query('ROLLBACK');
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n.' });
        }

        const { voucher_id, status } = billResult.rows[0];

        if (status !== 'ch·ªù x√°c nh·∫≠n') {
            await client.query('ROLLBACK');
            return res.status(400).json({ message: `Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i "${status}".` });
        }

        // --- HO√ÄN L·∫†I T·ªíN KHO ---
        const itemsToRestore = await client.query('SELECT product_id, quantity FROM BillItem WHERE bill_id = $1', [billId]);
        for (const item of itemsToRestore.rows) {
            await client.query(
                'UPDATE Product SET stock = stock + $1 WHERE product_id = $2',
                [item.quantity, item.product_id]
            );
        }

        await client.query("UPDATE Bill SET status = 'ƒë√£ h·ªßy' WHERE bill_id = $1", [billId]);

        if (voucher_id) {
            await client.query('UPDATE Voucher SET remaining = remaining + 1 WHERE voucher_id = $1', [voucher_id]);
        }

        await client.query('COMMIT');
        res.status(200).json({ message: 'H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng. T·ªìn kho v√† voucher (n·∫øu c√≥) ƒë√£ ƒë∆∞·ª£c ho√†n l·∫°i.' });

    } catch (err) {
        await client.query('ROLLBACK');
        console.error("‚ùå L·ªói SQL khi h·ªßy h√≥a ƒë∆°n:", err);
        res.status(500).json({ message: 'L·ªói server khi h·ªßy h√≥a ƒë∆°n: ' + err.message });
    } finally {
        client.release();
    }
});